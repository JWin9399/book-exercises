class(unlist(shark_length[4]))
?unlist
shark_length <- list(hammerhead <- 19.7,
great_white <- 20.0,
thresher <- 20.0,
goblin <- 12.6)
class(shark_length[4])
class(shark_length[[4]])
is.list(shark_length[4])
shark_length <- list(hammerhead <- c(19.7),
great_white <- c(20.0),
thresher <- c(20.0),
goblin <- c(12.6))
class(shark_length[4])
shark_length <- list(hammerhead  <- c(19.7),
great_white <- c(20.0),
thresher    <- c(20.0),
goblin      <- c(12.6))
class(goblin)
is.list(goblin)
shark_length[4]
is.list(shark_length[4])
is.list(shark_length[[4]])
shark_length[4]
shark_length[length(shark_length)]
length(shark_length)
is.list(shark_length[length(shark_length)])
great_white <- c(20.0),
thresher    <- c(20.0),
goblin      <- c(12.6))
# Access the last element in the list and return a vector
shark_length[[length(shark_length)]]
# Confirm that you returned a vector and not a list
is.list(shark_length[[length(shark_length)])
shark_length <- list(hammerhead  <- c(19.7),
great_white <- c(20.0),
thresher    <- c(20.0),
goblin      <- c(12.6))
# Access the last element in the list and return a vector
shark_length[[length(shark_length)]]
# Confirm that you returned a vector and not a list
is.list(shark_length[[length(shark_length)])
shark_length <- list(hammerhead  <- c(19.7),
great_white <- c(20.0),
thresher    <- c(20.0),
goblin      <- c(12.6))
# Access the last element in the list and return a vector
shark_length[[length(shark_length)]]
# Confirm that you returned a vector and not a list
is.list(shark_length[[length(shark_length)]])
shark_length <- list(hammerhead  = 19.7,
great_white = 20.0,
thresher    = 20.0,
goblin      = 12.6)
shark_length <- list(hammerhead  = 19.7,
great_white = 20.0,
thresher    = 20.0,
goblin      = 12.6)
shark_length[[length(shark_length)]]
is.list(shark_length[[length(shark_length)]])
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (sales_tax + 1)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- round(total_with_discount * (sales_tax + 1), 2)
earthquakes[ earthquakes > 6.5]
earthquakes[earthquakes > 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[earthquakes > 6.5]
#8
print(date_has_passed(as.Date("2020-01-23")))
#install.packages("stringr")
library("stringr")
#################
#### PART 1 #####
#################
#1
my_age <- 20
#2
my_name <- "Cao Duy Nguyen"
#3
# creates an introduction by taking someone's name and age
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, " and I'm ", age, " years old.")
return(intro)
}
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
#6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
#1
books <- c("Cat in the Hat",
"Green Eggs and Ham",
"How the Grinch Stole Christmas",
"One Fish, Two Fish, Red Fish, Blue Fish",
"Hop on Pop",
"The Lorax")
#2
top_three_books <- books[1:3]
print(top_three_books)
#3
book_reviews <- c(paste(books, "is a great read!"))
print(book_reviews)
#4
# removes the title of the book at the given index. takes book names and an index number
remove_book <- function(book_titles, index) {
new_book_titles <- book_titles[-index]
return(new_book_titles)
}
#5
books_without_five <- remove_book(books, 5)
print(books_without_five)
#6
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
#1
numbers <- 1:201
#2
squared_numbers <- numbers^2
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
print(squared_median)
#5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers), 0)]
print(perfect_squares)
#################
#### PART 4 #####
#################
#1
spring_break <- as.Date("2020-03-21")
print(spring_break)
#2
class(spring_break)
#3
today <- Sys.Date()
#4
days_to_break <- spring_break - today
print(days_to_break)
#5
# changes the year of the date to another year. Takes a date and year
change_year <- function(date, year) {
date_as_string <- as.character(date)
subtract_year <- substr(date_as_string, 5, 10)
new_date <- paste0(year, subtract_year)
new_date_vector <- as.Date(new_date)
return(new_date_vector)
}
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7
# determines whether a certain date has passed the current day.
# Takes a date and a boolean that determines whether to ignore the year or not
date_has_passed <- function(date, ignore_year = FALSE) {
new_date <- date
current_date <- Sys.Date()
if (ignore_year == TRUE) {
new_date <- change_year(new_date, 1999)
current_date <- change_year(current_date, 1999)
}
return(current_date - new_date > 0)
}
#8
print(date_has_passed(as.Date("2020-01-23")))
#9
birthdays <- list(Jacob = as.Date("1999-09-03"),
Songha = as.Date("2004-01-18"),
Dad = as.Date("1965-03-15"),
Mom = as.Date("1966-02-08"))
print(birthdays)
#10
# returns the date of the next birthday. Takes a birthday
get_next_birthday <- function(birthday) {
next_birthday <- birthday
if (date_has_passed(next_birthday, ignore_year = TRUE)) {
next_birthday <- change_year(next_birthday, 2021)
} else {
next_birthday <- change_year(next_birthday, 2020)
}
return(next_birthday)
}
#11
get_next_birthday(birthdays$Jacob)
#12
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
#8
print(date_has_passed(as.Date("2020-01-23")))
---------------------------------------------------------
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
---------------------------------------------------------
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
---------------------------------------------------------
people <- data.frame[name, height, weight, stringsAsFactors = FALSE]
---------------------------------------------------------
people <- data.frame(height, weight, stringsAsFactors = FALSE)
---------------------------------------------------------
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
view(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2017 <- salaries + adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2017 <- salaries + adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- salaries + adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- salaries_2017 + adjustments
salaries <- col(salaries_2018, stringsAsFactors = FALSE)
salaries_2018 <- col(salaries stringsAsFactors = FALSE)
salaries_2018 <- col(salaries, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
salaries[salaries$got_raise == TRUE]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), ]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), salaries$employees]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "name"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$adjustments <= 0, mean("adjustments")]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$adjustments <= 0, mean(salaries$adjustments <= 0)]
# For people who did not get a raise, how much money did they lose on average?
salaries[mean(salaries$adjustments <= 0), "adjustments"]
# For people who did not get a raise, how much money did they lose on average?
salaries[mean(salaries$adjustments), "adjustments"]
# For people who did not get a raise, how much money did they lose on average?
salaries[mean(salaries$adjustments < 0), "adjustments"]
# What was the average salary change?
mean(salaries$adjustments < 0)
# What was the average salary change?
mean(salaries[salaries$adjustments])
# What was the average salary change?
mean(salaries[salaries$adjustments, ])
# What was the average salary change?
mean(salaries$adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
salaries[mean(salaries$adjustments < 0), "adjustments"]
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# For people who did not get a raise, how much money did they lose on average?
salaries[mean(salaries$got_raise == FALSE, ]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$got_raise == FALSE, ]
mean(paycut$adjustments)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE, "adjustments"]
mean(paycut)
# For people who did not get a raise, how much money did they lose on average?
paycuts <- salaries[salaries$got_raise == FALSE, "adjustments"]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee", 1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries$adjustments)
# For people who did not get a raise, how much money did they lose on average?
paycuts <- salaries[salaries$got_raise == FALSE, "adjustments"]
mean(paycuts)
mean(paycuts$adjustments)
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
mean(salaries[salaries$got_raise == FALSE, ]$adjustments)
mean(paycuts)
# For people who did not get a raise, how much money did they lose on average?
paycuts <- salaries[salaries$got_raise == FALSE, ]
mean(paycuts$adjustments)
getwd()
setwd("C:/Users/Jacob/Downloads/folder with a space/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
view(grants)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
# What was the dollar amount of the largest grant?
# What was the dollar amount of the smallest grant?
# Which organization received the largest grant?
# Which organization received the smallest grant?
# How many grants were awarded in 2010?
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(organization)
# What was the mean grant value?
mean(organization[,])
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization"]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization"]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization", stringAsFactors = FALSE]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[ , "organization"]
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
grants[grants$total_amount == max(grants$total_amount), "total_amount"]
# What was the dollar amount of the smallest grant?
grants[grants$total_amount == mmin(grants$total_amount), "total_amount"]
# What was the dollar amount of the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "total_amount"]
# Which organization received the largest grant?
grants[grants$organization == max(grants$total_amount), "total_amount"]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# How many grants were awarded in 2010?
nrow(grants)
